import os
import pandas as pd
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, CallbackContext, filters

# ID —Ç–∞–±–ª–∏—Ü—ã
SPREADSHEET_ID = "1AbCDEfgHIjKlMNO-PQrsTUVWXYZ"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def get_tasks(task_type):
    url = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/gviz/tq?tqx=out:csv"
    df = pd.read_csv(url)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

    today = datetime.date.today()
    tasks = {}

    for _, row in df.iterrows():
        if row["–¢–∏–ø"] == task_type:
            unlock_date = datetime.datetime.strptime(row["–î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"], "%Y-%m-%d").date()
            days_left = (unlock_date - today).days

            tasks[row["–ù–∞–∑–≤–∞–Ω–∏–µ"]] = {
                "description": row["–û–ø–∏—Å–∞–Ω–∏–µ"],
                "link": row["–°—Å—ã–ª–∫–∞"],
                "unlock_date": unlock_date,
                "days_left": days_left
            }

    return tasks

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã", callback_data="lectures")],
        [InlineKeyboardButton("üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", callback_data="labs")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º
async def show_topics(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    task_type = "–õ–µ–∫—Ü–∏—è" if query.data == "lectures" else "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è"
    tasks = get_tasks(task_type)

    if not tasks:
        await query.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º.")
        return

    keyboard = []
    for name, details in tasks.items():
        text = f"{name} (‚è≥ {details['days_left']} –¥–Ω–µ–π)" if details["days_left"] > 0 else name
        keyboard.append([InlineKeyboardButton(text, callback_data=f"task_{name}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(f"üìú {task_type}:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
async def show_task(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    task_name = query.data.replace("task_", "")
    
    tasks = get_tasks("–õ–µ–∫—Ü–∏—è") | get_tasks("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è")  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–µ–∫—Ü–∏–∏ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ
    task = tasks.get(task_name)

    if not task:
        await query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if task["days_left"] > 0:
        await query.answer(f"‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {task['days_left']} –¥–Ω–µ–π.")
    else:
        text = f"üìå *{task_name}*\n{task['description']}\n[–°—Å—ã–ª–∫–∞]({task['link']})"
        await query.message.edit_text(text, parse_mode="Markdown")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
app = Application.builder().token(os.getenv("TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(show_topics, pattern="^(lectures|labs)$"))
app.add_handler(CallbackQueryHandler(show_task, pattern="^task_"))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()




