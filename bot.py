import os
import pandas as pd
import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters

# ID —Ç–≤–æ–µ–π Google –¢–∞–±–ª–∏—Ü—ã
SPREADSHEET_ID = "1s1F-DONBzaYH8n1JmQmuWS5Z1HW4lH4cz1Vl5wXSqyw"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
def get_tasks(task_type):
    url = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/gviz/tq?tqx=out:csv"
    df = pd.read_csv(url)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

    today = datetime.date.today()
    tasks = []

    for _, row in df.iterrows():
        if row["–¢–∏–ø"] == task_type:
            unlock_date = datetime.datetime.strptime(row["–î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"], "%Y-%m-%d").date()
            days_left = (unlock_date - today).days

            if days_left > 0:
                tasks.append(f"‚è≥ {row['–ù–∞–∑–≤–∞–Ω–∏–µ']} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.")
            else:
                tasks.append(f"üìå *{row['–ù–∞–∑–≤–∞–Ω–∏–µ']}*\n{row['–û–ø–∏—Å–∞–Ω–∏–µ']}\n[–°—Å—ã–ª–∫–∞]({row['–°—Å—ã–ª–∫–∞']})")

    return "\n\n".join(tasks) if tasks else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º."

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [KeyboardButton("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã")],
        [KeyboardButton("üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")],
        [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–µ–∫—Ü–∏–π
async def send_lectures(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(get_tasks("–õ–µ–∫—Ü–∏—è"), parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö
async def send_labs(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(get_tasks("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è"), parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = Application.builder().token(os.getenv("TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã"), send_lectures))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"), send_labs))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()



