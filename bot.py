import os
import pandas as pd
import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters

# ID Google –¢–∞–±–ª–∏—Ü—ã
SPREADSHEET_ID = "1s1F-DONBzaYH8n1JmQmuWS5Z1HW4lH4cz1Vl5wXSqyw"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–≤ —Ç–µ–º –°–†–°
selected_srs = {}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def get_tasks(task_type):
    url = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/gviz/tq?tqx=out:csv"
    
    try:
        df = pd.read_csv(url)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return {}

    today = datetime.date.today()
    tasks = {}

    for _, row in df.iterrows():
        if str(row.get("–¢–∏–ø", "")).strip() == task_type:
            unlock_date_str = str(row.get("–î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "")).strip()

            try:
                unlock_date = datetime.datetime.strptime(unlock_date_str, "%Y-%m-%d").date()
                days_left = (unlock_date - today).days
            except ValueError:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è

            tasks[row["–ù–∞–∑–≤–∞–Ω–∏–µ"]] = {
                "description": row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
                "link": row.get("–°—Å—ã–ª–∫–∞", "#"),
                "unlock_date": unlock_date,
                "days_left": days_left
            }

    return tasks

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [KeyboardButton("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã"), KeyboardButton("üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")],
        [KeyboardButton("–°–†–° (Django –ø—Ä–æ–µ–∫—Ç—ã)")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º
async def show_topics(update: Update, context: CallbackContext) -> None:
    task_type = "–õ–µ–∫—Ü–∏—è" if update.message.text == "üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã" else "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è" if update.message.text == "üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã" else "–°–†–°"
    if task_type == "–°–†–°":
        tasks = get_srs_tasks()
        await show_srs_topics(update, tasks)
        return
    
    tasks = get_tasks(task_type)

    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º.")
        return

    keyboard = []
    for name, details in tasks.items():
        text = f"{name} (‚è≥ {details['days_left']} –¥–Ω.)" if details["days_left"] > 0 else name
        keyboard.append([KeyboardButton(text)])

    keyboard.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"üìú {task_type}:", reply_markup=reply_markup)

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –°–†–°
def get_srs_tasks():
    srs_tasks = {
        f"–¢–µ–º–∞ {i+1} Django": "" for i in range(85)
    }
    return srs_tasks

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º—ã –¥–ª—è –°–†–°
async def show_srs_topics(update: Update, tasks: dict) -> None:
    keyboard = []
    for name, selected_by in tasks.items():
        text = f"{name} - (–í—ã–±—Ä–∞–Ω–æ: {selected_by})" if selected_by else name
        keyboard.append([KeyboardButton(text)])

    keyboard.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –°–†–°:", reply_markup=reply_markup)

# –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –°–†–°
async def select_srs_topic(update: Update, context: CallbackContext) -> None:
    if update.message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await start(update, context)
        return

    selected_topic = update.message.text
    user_name = update.message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ç–µ–º–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
    if selected_topic in selected_srs and selected_srs[selected_topic]:
        await update.message.reply_text(f"–¢–µ–º–∞ \"{selected_topic}\" —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {selected_srs[selected_topic]}.")
    else:
        # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected_srs[selected_topic] = user_name
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: \"{selected_topic}\". –í—ã –º–æ–∂–µ—Ç–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await show_srs_topics(update, selected_srs)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
app = Application.builder().token(os.getenv("TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã|üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã|–°–†–° (Django –ø—Ä–æ–µ–∫—Ç—ã)"), show_topics))
app.add_handler(MessageHandler(filters.TEXT, select_srs_topic))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
