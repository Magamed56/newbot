
import os
import pandas as pd
import sqlite3
import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters


# ID Google –¢–∞–±–ª–∏—Ü—ã
SPREADSHEET_ID = "1s1F-DONBzaYH8n1JmQmuWS5Z1HW4lH4cz1Vl5wXSqyw"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –°–†–°
def create_db():
    conn = sqlite3.connect('topics.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS topics (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT UNIQUE,
                        user TEXT)''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
def select_topic(topic, user):
    conn = sqlite3.connect('topics.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM topics WHERE name = ?", (topic,))
    result = cursor.fetchone()
    
    if result:
        cursor.execute("UPDATE topics SET user = ? WHERE name = ?", (user, topic))
    else:
        cursor.execute("INSERT INTO topics (name, user) VALUES (?, ?)", (topic, user))
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º
def get_selected_topics():
    conn = sqlite3.connect('topics.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name, user FROM topics")
    topics = cursor.fetchall()
    conn.close()
    return topics

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
def get_tasks(task_type):
    url = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/gviz/tq?tqx=out:csv"
    
    try:
        df = pd.read_csv(url)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return {}

    today = datetime.date.today()
    tasks = {}

    for _, row in df.iterrows():
        if str(row.get("–¢–∏–ø", "")).strip() == task_type:
            unlock_date_str = str(row.get("–î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "")).strip()

            try:
                unlock_date = datetime.datetime.strptime(unlock_date_str, "%Y-%m-%d").date()
                days_left = (unlock_date - today).days
            except ValueError:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è

            tasks[row["–ù–∞–∑–≤–∞–Ω–∏–µ"]] = {
                "description": row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
                "link": row.get("–°—Å—ã–ª–∫–∞", "#"),
                "unlock_date": unlock_date,
                "days_left": days_left
            }

    return tasks

# –°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –°–†–°
srs_topics = [
    "–ë–ª–æ–≥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", "–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω", "–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "–í–µ–±-—Å–∞–π—Ç –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
    "–°–∞–π—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–Ω–∏–≥–∞–º–∏", "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤", "–§–æ—Ä—É–º", "–ß–∞—Ç-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
    "–°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤", "–°–∞–π—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫", "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
    "–°–∞–π—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è", "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã —Å –≤–∏–¥–µ–æ—É—Ä–æ–∫–∞–º–∏", "–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫", "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å",
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤", "–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∫–æ–¥–∞–º–∏", "–û–Ω–ª–∞–π–Ω-–≥–∞–ª–µ—Ä–µ—è",
    "–°–∞–π—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª—å–æ—Ä–∏–π", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏",
    "–í–µ–±-—Å–∞–π—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é", "–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤",
    "–°–∞–π—Ç –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ", "–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏", "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫—Ü–∏–π",
    "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞", "–°–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤",
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞", "–í–µ–±-—Å–∞–π—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤", "–°–∞–π—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤", "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é", "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π",
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ –≤ —Å–ø–æ—Ä—Ç–µ", "–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤", "–í–µ–±-—Å–∞–π—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏",
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º –≤ –±–∏–∑–Ω–µ—Å–µ", "–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á",
    "–í–µ–±-—Å–∞–π—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂", "–û–Ω–ª–∞–π–Ω-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π", "–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π",
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π", "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π", "–°–∞–π—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤",
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ñ–∏–ª—å–º–æ–≤", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏",
    "–í–µ–±-—Å–∞–π—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞–≤—ã–∫–∞–º–∏", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫",
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã", "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–°–∞–π—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤", "–í–µ–±-—Å–∞–π—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤", "–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–∏–¥–æ–∫",
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞–º–∏", "–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å—É–≤–µ–Ω–∏—Ä–æ–≤", "–°–∞–π—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π",
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫", "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤",
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ", "–°–∞–π—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º",
    "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–≥–æ–¥—ã", "–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç", "–°–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π",
    "–û–Ω–ª–∞–π–Ω-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—Å–ª—É–≥", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ", "–í–µ–±-—Å–∞–π—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ–≤",
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤", "–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏", "–í–µ–±-—Å–∞–π—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–∫–æ–Ω–∫—É—Ä—Å–æ–≤",
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≥–æ–ª–æ—Å–æ–≤", "–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –∏–º—É—â–µ—Å—Ç–≤–æ",
    "–°–∞–π—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤ –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏"
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [KeyboardButton("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã"), KeyboardButton("üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")],
        [KeyboardButton("üìö –°–†–°")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –ª–µ–∫—Ü–∏–π –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö
async def show_topics(update: Update, context: CallbackContext) -> None:
    task_type = "–õ–µ–∫—Ü–∏—è" if update.message.text == "üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã" else "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è"
    tasks = get_tasks(task_type)

    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º.")
        return

    keyboard = []
    for name, details in tasks.items():
        text = f"{name} (‚è≥ {details['days_left']} –¥–Ω.)" if details["days_left"] > 0 else name
        keyboard.append([KeyboardButton(text)])

    keyboard.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"üìú {task_type}:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
async def show_task(update: Update, context: CallbackContext) -> None:
    if update.message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await start(update, context)
        return

    task_name = update.message.text.replace(" (‚è≥", "").split(" –¥–Ω.)")[0]  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∫–Ω–æ–ø–∫–∏
    tasks = get_tasks("–õ–µ–∫—Ü–∏—è") | get_tasks("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è")  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–µ–∫—Ü–∏–∏ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ
    task = tasks.get(task_name)

    if not task:
        await update.message.reply_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if task["days_left"] > 0:
        await update.message.reply_text(
            f"‚õî –¢–µ–º–∞ \"{task_name}\" –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            f"üìÖ –û–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è {task['unlock_date']} (—á–µ—Ä–µ–∑ {task['days_left']} –¥–Ω–µ–π)."
        )
    else:
        text = f"üìå *{task_name}*\n{task['description']}\n[–°—Å—ã–ª–∫–∞]({task['link']})"
        await update.message.reply_text(text, parse_mode="Markdown")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º—ã –¥–ª—è –°–†–°
async def show_srs_topics(update: Update, context: CallbackContext) -> None:
    keyboard = []
    for topic in srs_topics:
        keyboard.append([KeyboardButton(topic)])

    keyboard.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìú –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –°–†–°:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –°–†–°
async def handle_srs_selection(update: Update, context: CallbackContext) -> None:
    topic_name = update.message.text
    user_name = update.message.from_user.username

    selected_topics = get_selected_topics()
    topic_users = [user for t, user in selected_topics if t == topic_name]

    if len(topic_users) > 0:
        await update.message.reply_text(f"–¢–µ–º–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞! –í—ã–±—Ä–∞–Ω–æ: {', '.join(topic_users)}")
    else:
        select_topic(topic_name, user_name)
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {topic_name}. –í—ã–±–æ—Ä –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
app = Application.builder().token(os.getenv("TOKEN")).build()

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
create_db()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã|üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"), show_topics))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìö –°–†–°"), show_srs_topics))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚¨Ö –ù–∞–∑–∞–¥"), start))
app.add_handler(MessageHandler(filters.TEXT, show_task))
app.add_handler(MessageHandler(filters.TEXT, handle_srs_selection))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


