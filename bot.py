import os
import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
app = Application.builder().token(TOKEN).build()

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–µ–∫—Ü–∏–π
LECTURE_TOPICS = {
    "–í–≤–µ–¥–µ–Ω–∏–µ –≤ Python": "üìö **–í–≤–µ–¥–µ–Ω–∏–µ –≤ Python**\nPython ‚Äî —ç—Ç–æ –º–æ—â–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ–π –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
    "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö": "üìö **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö**\n–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ Python.",
    "–£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏": "üìö **–£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏**\n–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `if`, `elif`, `else` –≤ Python.",
}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö
LAB_TOPICS = {
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python": "üõ† **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã**\n–ì–¥–µ —Å–∫–∞—á–∞—Ç—å Python –∏ –∫–∞–∫ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.",
    "–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã": "üõ† **–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ Python**\n–ü–∏—à–µ–º –ø–µ—Ä–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å `print()` –∏ `input()`.",
    "–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏": "üõ† **–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏**\n–£—á–∏–º—Å—è –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º–∏ –≤ Python.",
}
CRC_TOPICS = {
    "Ljas": "üõ† **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã**\n–ì–¥–µ —Å–∫–∞—á–∞—Ç—å Python –∏ –∫–∞–∫ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.",
    "–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã": "üõ† **–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ Python**\n–ü–∏—à–µ–º –ø–µ—Ä–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å `print()` –∏ `input()`.",
    "–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏": "üõ† **–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏**\n–£—á–∏–º—Å—è –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º–∏ –≤ Python.",
}
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [KeyboardButton("üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã"), KeyboardButton("üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ç–µ–º—ã"),KeyboardButton("üõ† –°–†–° —Ç–µ–º—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞
async def menu_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text

    if text == "üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã":
        keyboard = [[KeyboardButton(topic)] for topic in LECTURE_TOPICS.keys()]
        keyboard.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ü–∏–æ–Ω–Ω—É—é —Ç–µ–º—É:", reply_markup=reply_markup)

    elif text == "üõ† –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ç–µ–º—ã":
        keyboard = [[KeyboardButton(topic)] for topic in LAB_TOPICS.keys()]
        keyboard.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üõ† –í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ç–µ–º—É:", reply_markup=reply_markup)
    
    elif text == "üõ† –°–†–° –¢–µ–º—ã":
        keyboard = [[KeyboardButton(topic)] for topic in CRC_TOPICS.keys()]
        keyboard.append([KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üõ† –í—ã–±–µ—Ä–∏—Ç–µ –°–†–° —Ç–µ–º—É:", reply_markup=reply_markup)

    elif text in LECTURE_TOPICS:
        await update.message.reply_text(LECTURE_TOPICS[text])

    elif text in LAB_TOPICS:
        await update.message.reply_text(LAB_TOPICS[text])
    elif text in CRC_TOPICS:
        await update.message.reply_text(CRC_TOPICS[text])

    elif text == "‚¨Ö –ù–∞–∑–∞–¥":
        await start(update, context)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


